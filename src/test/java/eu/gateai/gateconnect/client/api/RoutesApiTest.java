/*
 * Dataspace Connector
 * IDS Connector reference implementation
 *
 * The version of the OpenAPI document: 8.0.2
 * Contact: support@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.gateai.gateconnect.client.api;

import eu.gateai.gateconnect.client.ApiException;
import org.openapitools.client.model.ArtifactView;
import org.openapitools.client.model.PagedModelRouteView;
import org.openapitools.client.model.RouteDesc;
import org.openapitools.client.model.RouteView;
import java.net.URI;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RoutesApi
 */
@Disabled
public class RoutesApiTest {

    private final RoutesApi api = new RoutesApi();

    /**
     * Add a list of children to a base resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addResources1Test() throws ApiException {
        UUID id = null;
        List<URI> URI = null;
        PagedModelRouteView response = api.addResources1(id, URI);
        // TODO: test validations
    }

    /**
     * Create a base resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void create2Test() throws ApiException {
        RouteDesc routeDesc = null;
        RouteView response = api.create2(routeDesc);
        // TODO: test validations
    }

    /**
     * Creates the last endpoint for the route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLastEndpointTest() throws ApiException {
        UUID id = null;
        URI body = null;
        Object response = api.createLastEndpoint(id, body);
        // TODO: test validations
    }

    /**
     * Creates the start endpoint for a route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStartEndpointTest() throws ApiException {
        UUID id = null;
        URI body = null;
        Object response = api.createStartEndpoint(id, body);
        // TODO: test validations
    }

    /**
     * Delete a base resource by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delete2Test() throws ApiException {
        UUID id = null;
        api.delete2(id);
        // TODO: test validations
    }

    /**
     * Deletes the start endpoint of the route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLastEndpointTest() throws ApiException {
        UUID id = null;
        Object response = api.deleteLastEndpoint(id);
        // TODO: test validations
    }

    /**
     * Deletes the start endpoint of a route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStartEndpointTest() throws ApiException {
        UUID id = null;
        Object response = api.deleteStartEndpoint(id);
        // TODO: test validations
    }

    /**
     * Get a base resource by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void get2Test() throws ApiException {
        UUID id = null;
        RouteView response = api.get2(id);
        // TODO: test validations
    }

    /**
     * Get a list of base resources with pagination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAll2Test() throws ApiException {
        Integer page = null;
        Integer size = null;
        PagedModelRouteView response = api.getAll2(page, size);
        // TODO: test validations
    }

    /**
     * Returns the output of the route
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutputTest() throws ApiException {
        UUID id = null;
        ArtifactView response = api.getOutput(id);
        // TODO: test validations
    }

    /**
     * Get all children of a base resource with pagination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResource1Test() throws ApiException {
        UUID id = null;
        Integer page = null;
        Integer size = null;
        PagedModelRouteView response = api.getResource1(id, page, size);
        // TODO: test validations
    }

    /**
     * Remove a list of children from a base resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeResources1Test() throws ApiException {
        UUID id = null;
        List<URI> URI = null;
        api.removeResources1(id, URI);
        // TODO: test validations
    }

    /**
     * Replace the children of a base resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceResources1Test() throws ApiException {
        UUID id = null;
        List<URI> URI = null;
        api.replaceResources1(id, URI);
        // TODO: test validations
    }

    /**
     * Update a base resource by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void update2Test() throws ApiException {
        UUID id = null;
        RouteDesc routeDesc = null;
        RouteView response = api.update2(id, routeDesc);
        // TODO: test validations
    }

}
