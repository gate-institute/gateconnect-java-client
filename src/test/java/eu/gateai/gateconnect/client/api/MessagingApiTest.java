/*
 * Dataspace Connector
 * IDS Connector reference implementation
 *
 * The version of the OpenAPI document: 8.0.2
 * Contact: support@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.gateai.gateconnect.client.api;

import eu.gateai.gateconnect.client.ApiException;
import org.openapitools.client.model.SendMessage4RequestInner;
import org.openapitools.client.model.SubscriptionDesc;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessagingApi
 */
@Disabled
public class MessagingApiTest {

    private final MessagingApi api = new MessagingApi();

    /**
     * Notify all subscribers.
     *
     * Can be used to manually notify all subscribers about a resource offer, representation, or artifact update.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessageTest() throws ApiException {
        URI elementId = null;
        Object response = api.sendMessage(elementId);
        // TODO: test validations
    }

    /**
     * Send an IDS ResourceUpdateMessage.
     *
     * Can be used to register or update an IDS resource at an IDS Broker or consumer connector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessage1Test() throws ApiException {
        URI recipient = null;
        URI resourceId = null;
        Object response = api.sendMessage1(recipient, resourceId);
        // TODO: test validations
    }

    /**
     * Send an IDS ResourceUnavailableMessage.
     *
     * Can be used for e.g. unregistering an IDS resource at an IDS Broker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessage2Test() throws ApiException {
        URI recipient = null;
        URI resourceId = null;
        Object response = api.sendMessage2(recipient, resourceId);
        // TODO: test validations
    }

    /**
     * Send an IDS DescriptionRequestMessage to query metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessage3Test() throws ApiException {
        URI recipient = null;
        URI elementId = null;
        Object response = api.sendMessage3(recipient, elementId);
        // TODO: test validations
    }

    /**
     * Send an IDS ContractRequestMessage to start the contract negotiation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessage4Test() throws ApiException {
        URI recipient = null;
        List<URI> resourceIds = null;
        List<URI> artifactIds = null;
        Boolean download = null;
        List<SendMessage4RequestInner> sendMessage4RequestInner = null;
        Object response = api.sendMessage4(recipient, resourceIds, artifactIds, download, sendMessage4RequestInner);
        // TODO: test validations
    }

    /**
     * Send an IDS ConnectorUpdateMessage.
     *
     * Can be used for registering or updating the connector at an IDS Broker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessage5Test() throws ApiException {
        URI recipient = null;
        Object response = api.sendMessage5(recipient);
        // TODO: test validations
    }

    /**
     * Send an IDS ConnectorUnavailableMessage.
     *
     * Can be used for unregistering the connector at an IDS Broker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessage6Test() throws ApiException {
        URI recipient = null;
        Object response = api.sendMessage6(recipient);
        // TODO: test validations
    }

    /**
     * Download an IDS app from an IDS AppStore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessage7Test() throws ApiException {
        URI recipient = null;
        URI appId = null;
        Object response = api.sendMessage7(recipient, appId);
        // TODO: test validations
    }

    /**
     * Send an IDS QueryMessage.
     *
     * Can be used for querying an IDS component (e.g. the IDS Broker).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendQueryMessageTest() throws ApiException {
        URI recipient = null;
        String body = null;
        Object response = api.sendQueryMessage(recipient, body);
        // TODO: test validations
    }

    /**
     * Perform full-text search.
     *
     * Can be used for full text search at an IDS component (e.g. the Broker).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendSearchMessageTest() throws ApiException {
        URI recipient = null;
        Integer limit = null;
        Integer offset = null;
        String body = null;
        Object response = api.sendSearchMessage(recipient, limit, offset, body);
        // TODO: test validations
    }

    /**
     * Send an IDS request message for subscribing to (meta)data updates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscribeTest() throws ApiException {
        URI recipient = null;
        SubscriptionDesc subscriptionDesc = null;
        Object response = api.subscribe(recipient, subscriptionDesc);
        // TODO: test validations
    }

    /**
     * Send an IDS request message for unsubscribe from an element.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unsubscribeTest() throws ApiException {
        URI recipient = null;
        URI elementId = null;
        Object response = api.unsubscribe(recipient, elementId);
        // TODO: test validations
    }

}
