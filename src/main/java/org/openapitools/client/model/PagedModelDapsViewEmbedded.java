/*
 * Dataspace Connector
 * IDS Connector reference implementation
 *
 * The version of the OpenAPI document: 8.0.2
 * Contact: support@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.DapsView;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eu.gateai.gateconnect.client.JSON;

/**
 * PagedModelDapsViewEmbedded
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-21T15:13:44.561612454+03:00[Europe/Sofia]")
public class PagedModelDapsViewEmbedded {
  public static final String SERIALIZED_NAME_DAPS = "daps";
  @SerializedName(SERIALIZED_NAME_DAPS)
  private List<DapsView> daps;

  public PagedModelDapsViewEmbedded() {
  }

  public PagedModelDapsViewEmbedded daps(List<DapsView> daps) {
    
    this.daps = daps;
    return this;
  }

  public PagedModelDapsViewEmbedded addDapsItem(DapsView dapsItem) {
    if (this.daps == null) {
      this.daps = new ArrayList<>();
    }
    this.daps.add(dapsItem);
    return this;
  }

   /**
   * Get daps
   * @return daps
  **/
  @javax.annotation.Nullable
  public List<DapsView> getDaps() {
    return daps;
  }


  public void setDaps(List<DapsView> daps) {
    this.daps = daps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PagedModelDapsViewEmbedded pagedModelDapsViewEmbedded = (PagedModelDapsViewEmbedded) o;
    return Objects.equals(this.daps, pagedModelDapsViewEmbedded.daps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(daps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PagedModelDapsViewEmbedded {\n");
    sb.append("    daps: ").append(toIndentedString(daps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("daps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PagedModelDapsViewEmbedded
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PagedModelDapsViewEmbedded.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PagedModelDapsViewEmbedded is not found in the empty JSON string", PagedModelDapsViewEmbedded.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PagedModelDapsViewEmbedded.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PagedModelDapsViewEmbedded` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("daps") != null && !jsonObj.get("daps").isJsonNull()) {
        JsonArray jsonArraydaps = jsonObj.getAsJsonArray("daps");
        if (jsonArraydaps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("daps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `daps` to be an array in the JSON string but got `%s`", jsonObj.get("daps").toString()));
          }

          // validate the optional field `daps` (array)
          for (int i = 0; i < jsonArraydaps.size(); i++) {
            DapsView.validateJsonObject(jsonArraydaps.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PagedModelDapsViewEmbedded.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PagedModelDapsViewEmbedded' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PagedModelDapsViewEmbedded> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PagedModelDapsViewEmbedded.class));

       return (TypeAdapter<T>) new TypeAdapter<PagedModelDapsViewEmbedded>() {
           @Override
           public void write(JsonWriter out, PagedModelDapsViewEmbedded value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PagedModelDapsViewEmbedded read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PagedModelDapsViewEmbedded given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PagedModelDapsViewEmbedded
  * @throws IOException if the JSON string is invalid with respect to PagedModelDapsViewEmbedded
  */
  public static PagedModelDapsViewEmbedded fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PagedModelDapsViewEmbedded.class);
  }

 /**
  * Convert an instance of PagedModelDapsViewEmbedded to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

