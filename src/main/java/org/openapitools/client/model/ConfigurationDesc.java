/*
 * Dataspace Connector
 * IDS Connector reference implementation
 *
 * The version of the OpenAPI document: 8.0.2
 * Contact: support@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.KeystoreDesc;
import org.openapitools.client.model.ProxyDesc;
import org.openapitools.client.model.TruststoreDesc;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eu.gateai.gateconnect.client.JSON;

/**
 * ConfigurationDesc
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-24T16:01:45.808576329+03:00[Europe/Sofia]")
public class ConfigurationDesc {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CONNECTOR_ID = "connectorId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ID)
  private URI connectorId;

  public static final String SERIALIZED_NAME_DEFAULT_ENDPOINT = "defaultEndpoint";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ENDPOINT)
  private URI defaultEndpoint;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_CURATOR = "curator";
  @SerializedName(SERIALIZED_NAME_CURATOR)
  private URI curator;

  public static final String SERIALIZED_NAME_MAINTAINER = "maintainer";
  @SerializedName(SERIALIZED_NAME_MAINTAINER)
  private URI maintainer;

  public static final String SERIALIZED_NAME_INBOUND_MODEL_VERSION = "inboundModelVersion";
  @SerializedName(SERIALIZED_NAME_INBOUND_MODEL_VERSION)
  private List<String> inboundModelVersion;

  public static final String SERIALIZED_NAME_OUTBOUND_MODEL_VERSION = "outboundModelVersion";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_MODEL_VERSION)
  private String outboundModelVersion;

  /**
   * Gets or Sets securityProfile
   */
  @JsonAdapter(SecurityProfileEnum.Adapter.class)
  public enum SecurityProfileEnum {
    BASE_SECURITY("Base Security"),
    
    TRUST_PLUS_SECURITY("Trust Plus Security"),
    
    TRUST_SECURITY("Trust Security");

    private String value;

    SecurityProfileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecurityProfileEnum fromValue(String value) {
      for (SecurityProfileEnum b : SecurityProfileEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecurityProfileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecurityProfileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecurityProfileEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecurityProfileEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SECURITY_PROFILE = "securityProfile";
  @SerializedName(SERIALIZED_NAME_SECURITY_PROFILE)
  private SecurityProfileEnum securityProfile;

  /**
   * Gets or Sets logLevel
   */
  @JsonAdapter(LogLevelEnum.Adapter.class)
  public enum LogLevelEnum {
    OFF("Off"),
    
    TRACE("Trace"),
    
    DEBUG("Debug"),
    
    INFO("Info"),
    
    WARN("Warn"),
    
    ERROR("Error");

    private String value;

    LogLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogLevelEnum fromValue(String value) {
      for (LogLevelEnum b : LogLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOG_LEVEL = "logLevel";
  @SerializedName(SERIALIZED_NAME_LOG_LEVEL)
  private LogLevelEnum logLevel;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    FAULTY("Faulty"),
    
    OFFLINE("Offline"),
    
    ONLINE("Online");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Gets or Sets deployMode
   */
  @JsonAdapter(DeployModeEnum.Adapter.class)
  public enum DeployModeEnum {
    PRODUCTIVE("Productive"),
    
    TEST("Test");

    private String value;

    DeployModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeployModeEnum fromValue(String value) {
      for (DeployModeEnum b : DeployModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeployModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeployModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeployModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeployModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEPLOY_MODE = "deployMode";
  @SerializedName(SERIALIZED_NAME_DEPLOY_MODE)
  private DeployModeEnum deployMode;

  public static final String SERIALIZED_NAME_TRUSTSTORE = "truststore";
  @SerializedName(SERIALIZED_NAME_TRUSTSTORE)
  private TruststoreDesc truststore;

  public static final String SERIALIZED_NAME_PROXY = "proxy";
  @SerializedName(SERIALIZED_NAME_PROXY)
  private ProxyDesc proxy;

  public static final String SERIALIZED_NAME_KEYSTORE = "keystore";
  @SerializedName(SERIALIZED_NAME_KEYSTORE)
  private KeystoreDesc keystore;

  public ConfigurationDesc() {
  }

  
  public ConfigurationDesc(
     URI defaultEndpoint, 
     String version, 
     List<String> inboundModelVersion, 
     String outboundModelVersion, 
     SecurityProfileEnum securityProfile
  ) {
    this();
    this.defaultEndpoint = defaultEndpoint;
    this.version = version;
    this.inboundModelVersion = inboundModelVersion;
    this.outboundModelVersion = outboundModelVersion;
    this.securityProfile = securityProfile;
  }

  public ConfigurationDesc title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public ConfigurationDesc description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ConfigurationDesc connectorId(URI connectorId) {
    
    this.connectorId = connectorId;
    return this;
  }

   /**
   * Get connectorId
   * @return connectorId
  **/
  @javax.annotation.Nullable
  public URI getConnectorId() {
    return connectorId;
  }


  public void setConnectorId(URI connectorId) {
    this.connectorId = connectorId;
  }


   /**
   * Get defaultEndpoint
   * @return defaultEndpoint
  **/
  @javax.annotation.Nullable
  public URI getDefaultEndpoint() {
    return defaultEndpoint;
  }




   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }




  public ConfigurationDesc curator(URI curator) {
    
    this.curator = curator;
    return this;
  }

   /**
   * Get curator
   * @return curator
  **/
  @javax.annotation.Nullable
  public URI getCurator() {
    return curator;
  }


  public void setCurator(URI curator) {
    this.curator = curator;
  }


  public ConfigurationDesc maintainer(URI maintainer) {
    
    this.maintainer = maintainer;
    return this;
  }

   /**
   * Get maintainer
   * @return maintainer
  **/
  @javax.annotation.Nullable
  public URI getMaintainer() {
    return maintainer;
  }


  public void setMaintainer(URI maintainer) {
    this.maintainer = maintainer;
  }


   /**
   * Get inboundModelVersion
   * @return inboundModelVersion
  **/
  @javax.annotation.Nullable
  public List<String> getInboundModelVersion() {
    return inboundModelVersion;
  }




   /**
   * Get outboundModelVersion
   * @return outboundModelVersion
  **/
  @javax.annotation.Nullable
  public String getOutboundModelVersion() {
    return outboundModelVersion;
  }




   /**
   * Get securityProfile
   * @return securityProfile
  **/
  @javax.annotation.Nullable
  public SecurityProfileEnum getSecurityProfile() {
    return securityProfile;
  }




  public ConfigurationDesc logLevel(LogLevelEnum logLevel) {
    
    this.logLevel = logLevel;
    return this;
  }

   /**
   * Get logLevel
   * @return logLevel
  **/
  @javax.annotation.Nullable
  public LogLevelEnum getLogLevel() {
    return logLevel;
  }


  public void setLogLevel(LogLevelEnum logLevel) {
    this.logLevel = logLevel;
  }


  public ConfigurationDesc status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ConfigurationDesc deployMode(DeployModeEnum deployMode) {
    
    this.deployMode = deployMode;
    return this;
  }

   /**
   * Get deployMode
   * @return deployMode
  **/
  @javax.annotation.Nullable
  public DeployModeEnum getDeployMode() {
    return deployMode;
  }


  public void setDeployMode(DeployModeEnum deployMode) {
    this.deployMode = deployMode;
  }


  public ConfigurationDesc truststore(TruststoreDesc truststore) {
    
    this.truststore = truststore;
    return this;
  }

   /**
   * Get truststore
   * @return truststore
  **/
  @javax.annotation.Nullable
  public TruststoreDesc getTruststore() {
    return truststore;
  }


  public void setTruststore(TruststoreDesc truststore) {
    this.truststore = truststore;
  }


  public ConfigurationDesc proxy(ProxyDesc proxy) {
    
    this.proxy = proxy;
    return this;
  }

   /**
   * Get proxy
   * @return proxy
  **/
  @javax.annotation.Nullable
  public ProxyDesc getProxy() {
    return proxy;
  }


  public void setProxy(ProxyDesc proxy) {
    this.proxy = proxy;
  }


  public ConfigurationDesc keystore(KeystoreDesc keystore) {
    
    this.keystore = keystore;
    return this;
  }

   /**
   * Get keystore
   * @return keystore
  **/
  @javax.annotation.Nullable
  public KeystoreDesc getKeystore() {
    return keystore;
  }


  public void setKeystore(KeystoreDesc keystore) {
    this.keystore = keystore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationDesc configurationDesc = (ConfigurationDesc) o;
    return Objects.equals(this.title, configurationDesc.title) &&
        Objects.equals(this.description, configurationDesc.description) &&
        Objects.equals(this.connectorId, configurationDesc.connectorId) &&
        Objects.equals(this.defaultEndpoint, configurationDesc.defaultEndpoint) &&
        Objects.equals(this.version, configurationDesc.version) &&
        Objects.equals(this.curator, configurationDesc.curator) &&
        Objects.equals(this.maintainer, configurationDesc.maintainer) &&
        Objects.equals(this.inboundModelVersion, configurationDesc.inboundModelVersion) &&
        Objects.equals(this.outboundModelVersion, configurationDesc.outboundModelVersion) &&
        Objects.equals(this.securityProfile, configurationDesc.securityProfile) &&
        Objects.equals(this.logLevel, configurationDesc.logLevel) &&
        Objects.equals(this.status, configurationDesc.status) &&
        Objects.equals(this.deployMode, configurationDesc.deployMode) &&
        Objects.equals(this.truststore, configurationDesc.truststore) &&
        Objects.equals(this.proxy, configurationDesc.proxy) &&
        Objects.equals(this.keystore, configurationDesc.keystore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, connectorId, defaultEndpoint, version, curator, maintainer, inboundModelVersion, outboundModelVersion, securityProfile, logLevel, status, deployMode, truststore, proxy, keystore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationDesc {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    defaultEndpoint: ").append(toIndentedString(defaultEndpoint)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    curator: ").append(toIndentedString(curator)).append("\n");
    sb.append("    maintainer: ").append(toIndentedString(maintainer)).append("\n");
    sb.append("    inboundModelVersion: ").append(toIndentedString(inboundModelVersion)).append("\n");
    sb.append("    outboundModelVersion: ").append(toIndentedString(outboundModelVersion)).append("\n");
    sb.append("    securityProfile: ").append(toIndentedString(securityProfile)).append("\n");
    sb.append("    logLevel: ").append(toIndentedString(logLevel)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    deployMode: ").append(toIndentedString(deployMode)).append("\n");
    sb.append("    truststore: ").append(toIndentedString(truststore)).append("\n");
    sb.append("    proxy: ").append(toIndentedString(proxy)).append("\n");
    sb.append("    keystore: ").append(toIndentedString(keystore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("connectorId");
    openapiFields.add("defaultEndpoint");
    openapiFields.add("version");
    openapiFields.add("curator");
    openapiFields.add("maintainer");
    openapiFields.add("inboundModelVersion");
    openapiFields.add("outboundModelVersion");
    openapiFields.add("securityProfile");
    openapiFields.add("logLevel");
    openapiFields.add("status");
    openapiFields.add("deployMode");
    openapiFields.add("truststore");
    openapiFields.add("proxy");
    openapiFields.add("keystore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConfigurationDesc
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConfigurationDesc.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigurationDesc is not found in the empty JSON string", ConfigurationDesc.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConfigurationDesc.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigurationDesc` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("connectorId") != null && !jsonObj.get("connectorId").isJsonNull()) && !jsonObj.get("connectorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorId").toString()));
      }
      if ((jsonObj.get("defaultEndpoint") != null && !jsonObj.get("defaultEndpoint").isJsonNull()) && !jsonObj.get("defaultEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultEndpoint").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("curator") != null && !jsonObj.get("curator").isJsonNull()) && !jsonObj.get("curator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `curator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("curator").toString()));
      }
      if ((jsonObj.get("maintainer") != null && !jsonObj.get("maintainer").isJsonNull()) && !jsonObj.get("maintainer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maintainer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maintainer").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("inboundModelVersion") != null && !jsonObj.get("inboundModelVersion").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboundModelVersion` to be an array in the JSON string but got `%s`", jsonObj.get("inboundModelVersion").toString()));
      }
      if ((jsonObj.get("outboundModelVersion") != null && !jsonObj.get("outboundModelVersion").isJsonNull()) && !jsonObj.get("outboundModelVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outboundModelVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outboundModelVersion").toString()));
      }
      if ((jsonObj.get("securityProfile") != null && !jsonObj.get("securityProfile").isJsonNull()) && !jsonObj.get("securityProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityProfile").toString()));
      }
      if ((jsonObj.get("logLevel") != null && !jsonObj.get("logLevel").isJsonNull()) && !jsonObj.get("logLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logLevel").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("deployMode") != null && !jsonObj.get("deployMode").isJsonNull()) && !jsonObj.get("deployMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployMode").toString()));
      }
      // validate the optional field `truststore`
      if (jsonObj.get("truststore") != null && !jsonObj.get("truststore").isJsonNull()) {
        TruststoreDesc.validateJsonObject(jsonObj.getAsJsonObject("truststore"));
      }
      // validate the optional field `proxy`
      if (jsonObj.get("proxy") != null && !jsonObj.get("proxy").isJsonNull()) {
        ProxyDesc.validateJsonObject(jsonObj.getAsJsonObject("proxy"));
      }
      // validate the optional field `keystore`
      if (jsonObj.get("keystore") != null && !jsonObj.get("keystore").isJsonNull()) {
        KeystoreDesc.validateJsonObject(jsonObj.getAsJsonObject("keystore"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigurationDesc.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigurationDesc' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigurationDesc> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigurationDesc.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigurationDesc>() {
           @Override
           public void write(JsonWriter out, ConfigurationDesc value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigurationDesc read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConfigurationDesc given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConfigurationDesc
  * @throws IOException if the JSON string is invalid with respect to ConfigurationDesc
  */
  public static ConfigurationDesc fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigurationDesc.class);
  }

 /**
  * Convert an instance of ConfigurationDesc to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

