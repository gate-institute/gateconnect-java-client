/*
 * Dataspace Connector
 * IDS Connector reference implementation
 *
 * The version of the OpenAPI document: 8.0.2
 * Contact: support@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import org.openapitools.client.model.AuthenticationDesc;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eu.gateai.gateconnect.client.JSON;

/**
 * ArtifactDesc
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-17T13:56:16.367272784+03:00[Europe/Sofia]")
public class ArtifactDesc {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_REMOTE_ID = "remoteId";
  @SerializedName(SERIALIZED_NAME_REMOTE_ID)
  private URI remoteId;

  public static final String SERIALIZED_NAME_REMOTE_ADDRESS = "remoteAddress";
  @SerializedName(SERIALIZED_NAME_REMOTE_ADDRESS)
  private URI remoteAddress;

  public static final String SERIALIZED_NAME_ACCESS_URL = "accessUrl";
  @SerializedName(SERIALIZED_NAME_ACCESS_URL)
  private String accessUrl;

  public static final String SERIALIZED_NAME_BASIC_AUTH = "basicAuth";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH)
  private AuthenticationDesc basicAuth;

  public static final String SERIALIZED_NAME_API_KEY = "apiKey";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private AuthenticationDesc apiKey;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_AUTOMATED_DOWNLOAD = "automatedDownload";
  @SerializedName(SERIALIZED_NAME_AUTOMATED_DOWNLOAD)
  private Boolean automatedDownload;

  public ArtifactDesc() {
  }

  
  public ArtifactDesc(
     URI remoteId, 
     URI remoteAddress
  ) {
    this();
    this.remoteId = remoteId;
    this.remoteAddress = remoteAddress;
  }

  public ArtifactDesc title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public ArtifactDesc description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


   /**
   * Get remoteId
   * @return remoteId
  **/
  @javax.annotation.Nullable
  public URI getRemoteId() {
    return remoteId;
  }




   /**
   * Get remoteAddress
   * @return remoteAddress
  **/
  @javax.annotation.Nullable
  public URI getRemoteAddress() {
    return remoteAddress;
  }




  public ArtifactDesc accessUrl(String accessUrl) {
    
    this.accessUrl = accessUrl;
    return this;
  }

   /**
   * Get accessUrl
   * @return accessUrl
  **/
  @javax.annotation.Nullable
  public String getAccessUrl() {
    return accessUrl;
  }


  public void setAccessUrl(String accessUrl) {
    this.accessUrl = accessUrl;
  }


  public ArtifactDesc basicAuth(AuthenticationDesc basicAuth) {
    
    this.basicAuth = basicAuth;
    return this;
  }

   /**
   * Get basicAuth
   * @return basicAuth
  **/
  @javax.annotation.Nullable
  public AuthenticationDesc getBasicAuth() {
    return basicAuth;
  }


  public void setBasicAuth(AuthenticationDesc basicAuth) {
    this.basicAuth = basicAuth;
  }


  public ArtifactDesc apiKey(AuthenticationDesc apiKey) {
    
    this.apiKey = apiKey;
    return this;
  }

   /**
   * Get apiKey
   * @return apiKey
  **/
  @javax.annotation.Nullable
  public AuthenticationDesc getApiKey() {
    return apiKey;
  }


  public void setApiKey(AuthenticationDesc apiKey) {
    this.apiKey = apiKey;
  }


  public ArtifactDesc value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }


  public ArtifactDesc automatedDownload(Boolean automatedDownload) {
    
    this.automatedDownload = automatedDownload;
    return this;
  }

   /**
   * Get automatedDownload
   * @return automatedDownload
  **/
  @javax.annotation.Nullable
  public Boolean getAutomatedDownload() {
    return automatedDownload;
  }


  public void setAutomatedDownload(Boolean automatedDownload) {
    this.automatedDownload = automatedDownload;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArtifactDesc artifactDesc = (ArtifactDesc) o;
    return Objects.equals(this.title, artifactDesc.title) &&
        Objects.equals(this.description, artifactDesc.description) &&
        Objects.equals(this.remoteId, artifactDesc.remoteId) &&
        Objects.equals(this.remoteAddress, artifactDesc.remoteAddress) &&
        Objects.equals(this.accessUrl, artifactDesc.accessUrl) &&
        Objects.equals(this.basicAuth, artifactDesc.basicAuth) &&
        Objects.equals(this.apiKey, artifactDesc.apiKey) &&
        Objects.equals(this.value, artifactDesc.value) &&
        Objects.equals(this.automatedDownload, artifactDesc.automatedDownload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, remoteId, remoteAddress, accessUrl, basicAuth, apiKey, value, automatedDownload);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArtifactDesc {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    remoteId: ").append(toIndentedString(remoteId)).append("\n");
    sb.append("    remoteAddress: ").append(toIndentedString(remoteAddress)).append("\n");
    sb.append("    accessUrl: ").append(toIndentedString(accessUrl)).append("\n");
    sb.append("    basicAuth: ").append(toIndentedString(basicAuth)).append("\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    automatedDownload: ").append(toIndentedString(automatedDownload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("remoteId");
    openapiFields.add("remoteAddress");
    openapiFields.add("accessUrl");
    openapiFields.add("basicAuth");
    openapiFields.add("apiKey");
    openapiFields.add("value");
    openapiFields.add("automatedDownload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ArtifactDesc
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ArtifactDesc.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArtifactDesc is not found in the empty JSON string", ArtifactDesc.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ArtifactDesc.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArtifactDesc` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("remoteId") != null && !jsonObj.get("remoteId").isJsonNull()) && !jsonObj.get("remoteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteId").toString()));
      }
      if ((jsonObj.get("remoteAddress") != null && !jsonObj.get("remoteAddress").isJsonNull()) && !jsonObj.get("remoteAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteAddress").toString()));
      }
      if ((jsonObj.get("accessUrl") != null && !jsonObj.get("accessUrl").isJsonNull()) && !jsonObj.get("accessUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessUrl").toString()));
      }
      // validate the optional field `basicAuth`
      if (jsonObj.get("basicAuth") != null && !jsonObj.get("basicAuth").isJsonNull()) {
        AuthenticationDesc.validateJsonObject(jsonObj.getAsJsonObject("basicAuth"));
      }
      // validate the optional field `apiKey`
      if (jsonObj.get("apiKey") != null && !jsonObj.get("apiKey").isJsonNull()) {
        AuthenticationDesc.validateJsonObject(jsonObj.getAsJsonObject("apiKey"));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArtifactDesc.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArtifactDesc' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArtifactDesc> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArtifactDesc.class));

       return (TypeAdapter<T>) new TypeAdapter<ArtifactDesc>() {
           @Override
           public void write(JsonWriter out, ArtifactDesc value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArtifactDesc read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ArtifactDesc given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ArtifactDesc
  * @throws IOException if the JSON string is invalid with respect to ArtifactDesc
  */
  public static ArtifactDesc fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArtifactDesc.class);
  }

 /**
  * Convert an instance of ArtifactDesc to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

