/*
 * Dataspace Connector
 * IDS Connector reference implementation
 *
 * The version of the OpenAPI document: 8.0.2
 * Contact: support@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.ConnectorRestrictionDesc;
import org.openapitools.client.model.DeletionDesc;
import org.openapitools.client.model.DurationDesc;
import org.openapitools.client.model.IntervalDesc;
import org.openapitools.client.model.LoggingDesc;
import org.openapitools.client.model.NotificationDesc;
import org.openapitools.client.model.PatternDesc;
import org.openapitools.client.model.PermissionDesc;
import org.openapitools.client.model.ProhibitionDesc;
import org.openapitools.client.model.SecurityRestrictionDesc;
import org.openapitools.client.model.UsageNumberDesc;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import eu.gateai.gateconnect.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-24T16:01:45.808576329+03:00[Europe/Sofia]")
public class GetExampleUsagePolicyRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GetExampleUsagePolicyRequest.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetExampleUsagePolicyRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetExampleUsagePolicyRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ConnectorRestrictionDesc> adapterConnectorRestrictionDesc = gson.getDelegateAdapter(this, TypeToken.get(ConnectorRestrictionDesc.class));
            final TypeAdapter<DeletionDesc> adapterDeletionDesc = gson.getDelegateAdapter(this, TypeToken.get(DeletionDesc.class));
            final TypeAdapter<DurationDesc> adapterDurationDesc = gson.getDelegateAdapter(this, TypeToken.get(DurationDesc.class));
            final TypeAdapter<IntervalDesc> adapterIntervalDesc = gson.getDelegateAdapter(this, TypeToken.get(IntervalDesc.class));
            final TypeAdapter<LoggingDesc> adapterLoggingDesc = gson.getDelegateAdapter(this, TypeToken.get(LoggingDesc.class));
            final TypeAdapter<NotificationDesc> adapterNotificationDesc = gson.getDelegateAdapter(this, TypeToken.get(NotificationDesc.class));
            final TypeAdapter<PatternDesc> adapterPatternDesc = gson.getDelegateAdapter(this, TypeToken.get(PatternDesc.class));
            final TypeAdapter<PermissionDesc> adapterPermissionDesc = gson.getDelegateAdapter(this, TypeToken.get(PermissionDesc.class));
            final TypeAdapter<ProhibitionDesc> adapterProhibitionDesc = gson.getDelegateAdapter(this, TypeToken.get(ProhibitionDesc.class));
            final TypeAdapter<SecurityRestrictionDesc> adapterSecurityRestrictionDesc = gson.getDelegateAdapter(this, TypeToken.get(SecurityRestrictionDesc.class));
            final TypeAdapter<UsageNumberDesc> adapterUsageNumberDesc = gson.getDelegateAdapter(this, TypeToken.get(UsageNumberDesc.class));

            return (TypeAdapter<T>) new TypeAdapter<GetExampleUsagePolicyRequest>() {
                @Override
                public void write(JsonWriter out, GetExampleUsagePolicyRequest value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ConnectorRestrictionDesc`
                    if (value.getActualInstance() instanceof ConnectorRestrictionDesc) {
                        JsonObject obj = adapterConnectorRestrictionDesc.toJsonTree((ConnectorRestrictionDesc)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `DeletionDesc`
                    if (value.getActualInstance() instanceof DeletionDesc) {
                        JsonObject obj = adapterDeletionDesc.toJsonTree((DeletionDesc)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `DurationDesc`
                    if (value.getActualInstance() instanceof DurationDesc) {
                        JsonObject obj = adapterDurationDesc.toJsonTree((DurationDesc)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `IntervalDesc`
                    if (value.getActualInstance() instanceof IntervalDesc) {
                        JsonObject obj = adapterIntervalDesc.toJsonTree((IntervalDesc)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `LoggingDesc`
                    if (value.getActualInstance() instanceof LoggingDesc) {
                        JsonObject obj = adapterLoggingDesc.toJsonTree((LoggingDesc)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `NotificationDesc`
                    if (value.getActualInstance() instanceof NotificationDesc) {
                        JsonObject obj = adapterNotificationDesc.toJsonTree((NotificationDesc)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `PatternDesc`
                    if (value.getActualInstance() instanceof PatternDesc) {
                        JsonObject obj = adapterPatternDesc.toJsonTree((PatternDesc)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `PermissionDesc`
                    if (value.getActualInstance() instanceof PermissionDesc) {
                        JsonObject obj = adapterPermissionDesc.toJsonTree((PermissionDesc)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ProhibitionDesc`
                    if (value.getActualInstance() instanceof ProhibitionDesc) {
                        JsonObject obj = adapterProhibitionDesc.toJsonTree((ProhibitionDesc)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SecurityRestrictionDesc`
                    if (value.getActualInstance() instanceof SecurityRestrictionDesc) {
                        JsonObject obj = adapterSecurityRestrictionDesc.toJsonTree((SecurityRestrictionDesc)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `UsageNumberDesc`
                    if (value.getActualInstance() instanceof UsageNumberDesc) {
                        JsonObject obj = adapterUsageNumberDesc.toJsonTree((UsageNumberDesc)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ConnectorRestrictionDesc, DeletionDesc, DurationDesc, IntervalDesc, LoggingDesc, NotificationDesc, PatternDesc, PermissionDesc, ProhibitionDesc, SecurityRestrictionDesc, UsageNumberDesc");
                }

                @Override
                public GetExampleUsagePolicyRequest read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ConnectorRestrictionDesc
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConnectorRestrictionDesc.validateJsonObject(jsonObject);
                        actualAdapter = adapterConnectorRestrictionDesc;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConnectorRestrictionDesc'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConnectorRestrictionDesc failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConnectorRestrictionDesc'", e);
                    }

                    // deserialize DeletionDesc
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DeletionDesc.validateJsonObject(jsonObject);
                        actualAdapter = adapterDeletionDesc;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DeletionDesc'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DeletionDesc failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DeletionDesc'", e);
                    }

                    // deserialize DurationDesc
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DurationDesc.validateJsonObject(jsonObject);
                        actualAdapter = adapterDurationDesc;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DurationDesc'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DurationDesc failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DurationDesc'", e);
                    }

                    // deserialize IntervalDesc
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IntervalDesc.validateJsonObject(jsonObject);
                        actualAdapter = adapterIntervalDesc;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IntervalDesc'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IntervalDesc failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IntervalDesc'", e);
                    }

                    // deserialize LoggingDesc
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LoggingDesc.validateJsonObject(jsonObject);
                        actualAdapter = adapterLoggingDesc;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'LoggingDesc'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LoggingDesc failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LoggingDesc'", e);
                    }

                    // deserialize NotificationDesc
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NotificationDesc.validateJsonObject(jsonObject);
                        actualAdapter = adapterNotificationDesc;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NotificationDesc'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NotificationDesc failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NotificationDesc'", e);
                    }

                    // deserialize PatternDesc
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PatternDesc.validateJsonObject(jsonObject);
                        actualAdapter = adapterPatternDesc;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PatternDesc'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PatternDesc failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PatternDesc'", e);
                    }

                    // deserialize PermissionDesc
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PermissionDesc.validateJsonObject(jsonObject);
                        actualAdapter = adapterPermissionDesc;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PermissionDesc'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PermissionDesc failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PermissionDesc'", e);
                    }

                    // deserialize ProhibitionDesc
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ProhibitionDesc.validateJsonObject(jsonObject);
                        actualAdapter = adapterProhibitionDesc;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ProhibitionDesc'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ProhibitionDesc failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ProhibitionDesc'", e);
                    }

                    // deserialize SecurityRestrictionDesc
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SecurityRestrictionDesc.validateJsonObject(jsonObject);
                        actualAdapter = adapterSecurityRestrictionDesc;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SecurityRestrictionDesc'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SecurityRestrictionDesc failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SecurityRestrictionDesc'", e);
                    }

                    // deserialize UsageNumberDesc
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UsageNumberDesc.validateJsonObject(jsonObject);
                        actualAdapter = adapterUsageNumberDesc;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UsageNumberDesc'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UsageNumberDesc failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UsageNumberDesc'", e);
                    }

                    if (match == 1) {
                        GetExampleUsagePolicyRequest ret = new GetExampleUsagePolicyRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for GetExampleUsagePolicyRequest: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public GetExampleUsagePolicyRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public GetExampleUsagePolicyRequest(ConnectorRestrictionDesc o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetExampleUsagePolicyRequest(DeletionDesc o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetExampleUsagePolicyRequest(DurationDesc o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetExampleUsagePolicyRequest(IntervalDesc o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetExampleUsagePolicyRequest(LoggingDesc o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetExampleUsagePolicyRequest(NotificationDesc o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetExampleUsagePolicyRequest(PatternDesc o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetExampleUsagePolicyRequest(PermissionDesc o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetExampleUsagePolicyRequest(ProhibitionDesc o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetExampleUsagePolicyRequest(SecurityRestrictionDesc o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GetExampleUsagePolicyRequest(UsageNumberDesc o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ConnectorRestrictionDesc", new GenericType<ConnectorRestrictionDesc>() {
        });
        schemas.put("DeletionDesc", new GenericType<DeletionDesc>() {
        });
        schemas.put("DurationDesc", new GenericType<DurationDesc>() {
        });
        schemas.put("IntervalDesc", new GenericType<IntervalDesc>() {
        });
        schemas.put("LoggingDesc", new GenericType<LoggingDesc>() {
        });
        schemas.put("NotificationDesc", new GenericType<NotificationDesc>() {
        });
        schemas.put("PatternDesc", new GenericType<PatternDesc>() {
        });
        schemas.put("PermissionDesc", new GenericType<PermissionDesc>() {
        });
        schemas.put("ProhibitionDesc", new GenericType<ProhibitionDesc>() {
        });
        schemas.put("SecurityRestrictionDesc", new GenericType<SecurityRestrictionDesc>() {
        });
        schemas.put("UsageNumberDesc", new GenericType<UsageNumberDesc>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return GetExampleUsagePolicyRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ConnectorRestrictionDesc, DeletionDesc, DurationDesc, IntervalDesc, LoggingDesc, NotificationDesc, PatternDesc, PermissionDesc, ProhibitionDesc, SecurityRestrictionDesc, UsageNumberDesc
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ConnectorRestrictionDesc) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DeletionDesc) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DurationDesc) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IntervalDesc) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LoggingDesc) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NotificationDesc) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PatternDesc) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PermissionDesc) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ProhibitionDesc) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SecurityRestrictionDesc) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UsageNumberDesc) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ConnectorRestrictionDesc, DeletionDesc, DurationDesc, IntervalDesc, LoggingDesc, NotificationDesc, PatternDesc, PermissionDesc, ProhibitionDesc, SecurityRestrictionDesc, UsageNumberDesc");
    }

    /**
     * Get the actual instance, which can be the following:
     * ConnectorRestrictionDesc, DeletionDesc, DurationDesc, IntervalDesc, LoggingDesc, NotificationDesc, PatternDesc, PermissionDesc, ProhibitionDesc, SecurityRestrictionDesc, UsageNumberDesc
     *
     * @return The actual instance (ConnectorRestrictionDesc, DeletionDesc, DurationDesc, IntervalDesc, LoggingDesc, NotificationDesc, PatternDesc, PermissionDesc, ProhibitionDesc, SecurityRestrictionDesc, UsageNumberDesc)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ConnectorRestrictionDesc`. If the actual instance is not `ConnectorRestrictionDesc`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConnectorRestrictionDesc`
     * @throws ClassCastException if the instance is not `ConnectorRestrictionDesc`
     */
    public ConnectorRestrictionDesc getConnectorRestrictionDesc() throws ClassCastException {
        return (ConnectorRestrictionDesc)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DeletionDesc`. If the actual instance is not `DeletionDesc`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DeletionDesc`
     * @throws ClassCastException if the instance is not `DeletionDesc`
     */
    public DeletionDesc getDeletionDesc() throws ClassCastException {
        return (DeletionDesc)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DurationDesc`. If the actual instance is not `DurationDesc`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DurationDesc`
     * @throws ClassCastException if the instance is not `DurationDesc`
     */
    public DurationDesc getDurationDesc() throws ClassCastException {
        return (DurationDesc)super.getActualInstance();
    }

    /**
     * Get the actual instance of `IntervalDesc`. If the actual instance is not `IntervalDesc`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IntervalDesc`
     * @throws ClassCastException if the instance is not `IntervalDesc`
     */
    public IntervalDesc getIntervalDesc() throws ClassCastException {
        return (IntervalDesc)super.getActualInstance();
    }

    /**
     * Get the actual instance of `LoggingDesc`. If the actual instance is not `LoggingDesc`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LoggingDesc`
     * @throws ClassCastException if the instance is not `LoggingDesc`
     */
    public LoggingDesc getLoggingDesc() throws ClassCastException {
        return (LoggingDesc)super.getActualInstance();
    }

    /**
     * Get the actual instance of `NotificationDesc`. If the actual instance is not `NotificationDesc`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NotificationDesc`
     * @throws ClassCastException if the instance is not `NotificationDesc`
     */
    public NotificationDesc getNotificationDesc() throws ClassCastException {
        return (NotificationDesc)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PatternDesc`. If the actual instance is not `PatternDesc`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PatternDesc`
     * @throws ClassCastException if the instance is not `PatternDesc`
     */
    public PatternDesc getPatternDesc() throws ClassCastException {
        return (PatternDesc)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PermissionDesc`. If the actual instance is not `PermissionDesc`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PermissionDesc`
     * @throws ClassCastException if the instance is not `PermissionDesc`
     */
    public PermissionDesc getPermissionDesc() throws ClassCastException {
        return (PermissionDesc)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ProhibitionDesc`. If the actual instance is not `ProhibitionDesc`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ProhibitionDesc`
     * @throws ClassCastException if the instance is not `ProhibitionDesc`
     */
    public ProhibitionDesc getProhibitionDesc() throws ClassCastException {
        return (ProhibitionDesc)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SecurityRestrictionDesc`. If the actual instance is not `SecurityRestrictionDesc`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SecurityRestrictionDesc`
     * @throws ClassCastException if the instance is not `SecurityRestrictionDesc`
     */
    public SecurityRestrictionDesc getSecurityRestrictionDesc() throws ClassCastException {
        return (SecurityRestrictionDesc)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UsageNumberDesc`. If the actual instance is not `UsageNumberDesc`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UsageNumberDesc`
     * @throws ClassCastException if the instance is not `UsageNumberDesc`
     */
    public UsageNumberDesc getUsageNumberDesc() throws ClassCastException {
        return (UsageNumberDesc)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetExampleUsagePolicyRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with ConnectorRestrictionDesc
    try {
      ConnectorRestrictionDesc.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ConnectorRestrictionDesc failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DeletionDesc
    try {
      DeletionDesc.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for DeletionDesc failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DurationDesc
    try {
      DurationDesc.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for DurationDesc failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with IntervalDesc
    try {
      IntervalDesc.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for IntervalDesc failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with LoggingDesc
    try {
      LoggingDesc.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for LoggingDesc failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with NotificationDesc
    try {
      NotificationDesc.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for NotificationDesc failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with PatternDesc
    try {
      PatternDesc.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for PatternDesc failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with PermissionDesc
    try {
      PermissionDesc.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for PermissionDesc failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ProhibitionDesc
    try {
      ProhibitionDesc.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ProhibitionDesc failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SecurityRestrictionDesc
    try {
      SecurityRestrictionDesc.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SecurityRestrictionDesc failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with UsageNumberDesc
    try {
      UsageNumberDesc.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for UsageNumberDesc failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for GetExampleUsagePolicyRequest with oneOf schemas: ConnectorRestrictionDesc, DeletionDesc, DurationDesc, IntervalDesc, LoggingDesc, NotificationDesc, PatternDesc, PermissionDesc, ProhibitionDesc, SecurityRestrictionDesc, UsageNumberDesc. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of GetExampleUsagePolicyRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetExampleUsagePolicyRequest
  * @throws IOException if the JSON string is invalid with respect to GetExampleUsagePolicyRequest
  */
  public static GetExampleUsagePolicyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetExampleUsagePolicyRequest.class);
  }

 /**
  * Convert an instance of GetExampleUsagePolicyRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

