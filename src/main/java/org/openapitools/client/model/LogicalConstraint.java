/*
 * Dataspace Connector
 * IDS Connector reference implementation
 *
 * The version of the OpenAPI document: 8.0.2
 * Contact: support@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AbstractConstraint;
import org.openapitools.client.model.Constraint;
import org.openapitools.client.model.TypedLiteral;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eu.gateai.gateconnect.client.JSON;

/**
 * LogicalConstraint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-17T13:56:16.367272784+03:00[Europe/Sofia]")
public class LogicalConstraint extends AbstractConstraint {
  public static final String SERIALIZED_NAME_IDS_COLON_AND = "ids:and";
  @SerializedName(SERIALIZED_NAME_IDS_COLON_AND)
  private List<Constraint> idsColonAnd;

  public static final String SERIALIZED_NAME_IDS_COLON_XONE = "ids:xone";
  @SerializedName(SERIALIZED_NAME_IDS_COLON_XONE)
  private List<Constraint> idsColonXone;

  public static final String SERIALIZED_NAME_IDS_COLON_OR = "ids:or";
  @SerializedName(SERIALIZED_NAME_IDS_COLON_OR)
  private List<Constraint> idsColonOr;

  public static final String SERIALIZED_NAME_AT_TYPE = "@type";
  @SerializedName(SERIALIZED_NAME_AT_TYPE)
  protected String atType;

  public LogicalConstraint() {
    this.atType = this.getClass().getSimpleName();
  }

  public LogicalConstraint idsColonAnd(List<Constraint> idsColonAnd) {
    
    this.idsColonAnd = idsColonAnd;
    return this;
  }

  public LogicalConstraint addIdsColonAndItem(Constraint idsColonAndItem) {
    if (this.idsColonAnd == null) {
      this.idsColonAnd = new ArrayList<>();
    }
    this.idsColonAnd.add(idsColonAndItem);
    return this;
  }

   /**
   * Get idsColonAnd
   * @return idsColonAnd
  **/
  @javax.annotation.Nullable
  public List<Constraint> getIdsColonAnd() {
    return idsColonAnd;
  }


  public void setIdsColonAnd(List<Constraint> idsColonAnd) {
    this.idsColonAnd = idsColonAnd;
  }


  public LogicalConstraint idsColonXone(List<Constraint> idsColonXone) {
    
    this.idsColonXone = idsColonXone;
    return this;
  }

  public LogicalConstraint addIdsColonXoneItem(Constraint idsColonXoneItem) {
    if (this.idsColonXone == null) {
      this.idsColonXone = new ArrayList<>();
    }
    this.idsColonXone.add(idsColonXoneItem);
    return this;
  }

   /**
   * Get idsColonXone
   * @return idsColonXone
  **/
  @javax.annotation.Nullable
  public List<Constraint> getIdsColonXone() {
    return idsColonXone;
  }


  public void setIdsColonXone(List<Constraint> idsColonXone) {
    this.idsColonXone = idsColonXone;
  }


  public LogicalConstraint idsColonOr(List<Constraint> idsColonOr) {
    
    this.idsColonOr = idsColonOr;
    return this;
  }

  public LogicalConstraint addIdsColonOrItem(Constraint idsColonOrItem) {
    if (this.idsColonOr == null) {
      this.idsColonOr = new ArrayList<>();
    }
    this.idsColonOr.add(idsColonOrItem);
    return this;
  }

   /**
   * Get idsColonOr
   * @return idsColonOr
  **/
  @javax.annotation.Nullable
  public List<Constraint> getIdsColonOr() {
    return idsColonOr;
  }


  public void setIdsColonOr(List<Constraint> idsColonOr) {
    this.idsColonOr = idsColonOr;
  }


  public LogicalConstraint atType(String atType) {
    
    this.atType = atType;
    return this;
  }

   /**
   * Get atType
   * @return atType
  **/
  @javax.annotation.Nonnull
  public String getAtType() {
    return atType;
  }


  public void setAtType(String atType) {
    this.atType = atType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogicalConstraint logicalConstraint = (LogicalConstraint) o;
    return Objects.equals(this.idsColonAnd, logicalConstraint.idsColonAnd) &&
        Objects.equals(this.idsColonXone, logicalConstraint.idsColonXone) &&
        Objects.equals(this.idsColonOr, logicalConstraint.idsColonOr) &&
        Objects.equals(this.atType, logicalConstraint.atType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idsColonAnd, idsColonXone, idsColonOr, atType, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogicalConstraint {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    idsColonAnd: ").append(toIndentedString(idsColonAnd)).append("\n");
    sb.append("    idsColonXone: ").append(toIndentedString(idsColonXone)).append("\n");
    sb.append("    idsColonOr: ").append(toIndentedString(idsColonOr)).append("\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("properties");
    openapiFields.add("comment");
    openapiFields.add("label");
    openapiFields.add("@id");
    openapiFields.add("@type");
    openapiFields.add("ids:and");
    openapiFields.add("ids:xone");
    openapiFields.add("ids:or");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("@type");
    openapiRequiredFields.add("@id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LogicalConstraint
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LogicalConstraint.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogicalConstraint is not found in the empty JSON string", LogicalConstraint.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LogicalConstraint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogicalConstraint` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LogicalConstraint.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogicalConstraint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogicalConstraint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogicalConstraint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogicalConstraint.class));

       return (TypeAdapter<T>) new TypeAdapter<LogicalConstraint>() {
           @Override
           public void write(JsonWriter out, LogicalConstraint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogicalConstraint read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LogicalConstraint given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LogicalConstraint
  * @throws IOException if the JSON string is invalid with respect to LogicalConstraint
  */
  public static LogicalConstraint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogicalConstraint.class);
  }

 /**
  * Convert an instance of LogicalConstraint to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

