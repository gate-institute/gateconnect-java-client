/*
 * Dataspace Connector
 * IDS Connector reference implementation
 *
 * The version of the OpenAPI document: 8.0.2
 * Contact: support@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.RuleIdsAssetRefinement;
import org.openapitools.client.model.RuleIdsConstraintInner;
import org.openapitools.client.model.TypedLiteral;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eu.gateai.gateconnect.client.JSON;

/**
 * Rule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-21T15:13:44.561612454+03:00[Europe/Sofia]")
public class Rule {
  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Object> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private List<TypedLiteral> comment;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private List<TypedLiteral> label;

  public static final String SERIALIZED_NAME_IDS_COLON_TARGET = "ids:target";
  @SerializedName(SERIALIZED_NAME_IDS_COLON_TARGET)
  private URI idsColonTarget;

  public static final String SERIALIZED_NAME_IDS_COLON_ASSIGNER = "ids:assigner";
  @SerializedName(SERIALIZED_NAME_IDS_COLON_ASSIGNER)
  private List<URI> idsColonAssigner;

  public static final String SERIALIZED_NAME_IDS_COLON_ASSIGNEE = "ids:assignee";
  @SerializedName(SERIALIZED_NAME_IDS_COLON_ASSIGNEE)
  private List<URI> idsColonAssignee;

  public static final String SERIALIZED_NAME_IDS_COLON_CONSTRAINT = "ids:constraint";
  @SerializedName(SERIALIZED_NAME_IDS_COLON_CONSTRAINT)
  private List<RuleIdsConstraintInner> idsColonConstraint;

  public static final String SERIALIZED_NAME_IDS_COLON_ASSET_REFINEMENT = "ids:assetRefinement";
  @SerializedName(SERIALIZED_NAME_IDS_COLON_ASSET_REFINEMENT)
  private RuleIdsAssetRefinement idsColonAssetRefinement;

  /**
   * Gets or Sets idsColonAction
   */
  @JsonAdapter(IdsColonActionEnum.Adapter.class)
  public enum IdsColonActionEnum {
    AGGREGATE_BY_CONSUMER("https://w3id.org/idsa/code/AGGREGATE_BY_CONSUMER"),
    
    AGGREGATE_BY_PROVIDER("https://w3id.org/idsa/code/AGGREGATE_BY_PROVIDER"),
    
    ANONYMIZE("https://w3id.org/idsa/code/ANONYMIZE"),
    
    COMPENSATE("https://w3id.org/idsa/code/COMPENSATE"),
    
    DELETE("https://w3id.org/idsa/code/DELETE"),
    
    DISTRIBUTE("https://w3id.org/idsa/code/DISTRIBUTE"),
    
    ENCRYPT("https://w3id.org/idsa/code/ENCRYPT"),
    
    GRANT_USE("https://w3id.org/idsa/code/GRANT_USE"),
    
    LOG("https://w3id.org/idsa/code/LOG"),
    
    MODIFY("https://w3id.org/idsa/code/MODIFY"),
    
    NEXT_POLICY("https://w3id.org/idsa/code/NEXT_POLICY"),
    
    NOTIFY("https://w3id.org/idsa/code/NOTIFY"),
    
    READ("https://w3id.org/idsa/code/READ"),
    
    TRACK_PROVENANCE("https://w3id.org/idsa/code/TRACK_PROVENANCE"),
    
    USE("https://w3id.org/idsa/code/USE"),
    
    WRITE("https://w3id.org/idsa/code/WRITE");

    private String value;

    IdsColonActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IdsColonActionEnum fromValue(String value) {
      for (IdsColonActionEnum b : IdsColonActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IdsColonActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IdsColonActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IdsColonActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IdsColonActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IDS_COLON_ACTION = "ids:action";
  @SerializedName(SERIALIZED_NAME_IDS_COLON_ACTION)
  private List<IdsColonActionEnum> idsColonAction = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDS_COLON_DESCRIPTION = "ids:description";
  @SerializedName(SERIALIZED_NAME_IDS_COLON_DESCRIPTION)
  private List<TypedLiteral> idsColonDescription;

  public static final String SERIALIZED_NAME_IDS_COLON_TITLE = "ids:title";
  @SerializedName(SERIALIZED_NAME_IDS_COLON_TITLE)
  private List<TypedLiteral> idsColonTitle;

  public static final String SERIALIZED_NAME_AT_ID = "@id";
  @SerializedName(SERIALIZED_NAME_AT_ID)
  private URI atId;

  public static final String SERIALIZED_NAME_AT_TYPE = "@type";
  @SerializedName(SERIALIZED_NAME_AT_TYPE)
  protected String atType;

  public Rule() {
    this.atType = this.getClass().getSimpleName();
  }

  public Rule properties(Map<String, Object> properties) {
    
    this.properties = properties;
    return this;
  }

  public Rule putPropertiesItem(String key, Object propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, Object> properties) {
    this.properties = properties;
  }


  public Rule comment(List<TypedLiteral> comment) {
    
    this.comment = comment;
    return this;
  }

  public Rule addCommentItem(TypedLiteral commentItem) {
    if (this.comment == null) {
      this.comment = new ArrayList<>();
    }
    this.comment.add(commentItem);
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  public List<TypedLiteral> getComment() {
    return comment;
  }


  public void setComment(List<TypedLiteral> comment) {
    this.comment = comment;
  }


  public Rule label(List<TypedLiteral> label) {
    
    this.label = label;
    return this;
  }

  public Rule addLabelItem(TypedLiteral labelItem) {
    if (this.label == null) {
      this.label = new ArrayList<>();
    }
    this.label.add(labelItem);
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  public List<TypedLiteral> getLabel() {
    return label;
  }


  public void setLabel(List<TypedLiteral> label) {
    this.label = label;
  }


  public Rule idsColonTarget(URI idsColonTarget) {
    
    this.idsColonTarget = idsColonTarget;
    return this;
  }

   /**
   * Get idsColonTarget
   * @return idsColonTarget
  **/
  @javax.annotation.Nullable
  public URI getIdsColonTarget() {
    return idsColonTarget;
  }


  public void setIdsColonTarget(URI idsColonTarget) {
    this.idsColonTarget = idsColonTarget;
  }


  public Rule idsColonAssigner(List<URI> idsColonAssigner) {
    
    this.idsColonAssigner = idsColonAssigner;
    return this;
  }

  public Rule addIdsColonAssignerItem(URI idsColonAssignerItem) {
    if (this.idsColonAssigner == null) {
      this.idsColonAssigner = new ArrayList<>();
    }
    this.idsColonAssigner.add(idsColonAssignerItem);
    return this;
  }

   /**
   * Get idsColonAssigner
   * @return idsColonAssigner
  **/
  @javax.annotation.Nullable
  public List<URI> getIdsColonAssigner() {
    return idsColonAssigner;
  }


  public void setIdsColonAssigner(List<URI> idsColonAssigner) {
    this.idsColonAssigner = idsColonAssigner;
  }


  public Rule idsColonAssignee(List<URI> idsColonAssignee) {
    
    this.idsColonAssignee = idsColonAssignee;
    return this;
  }

  public Rule addIdsColonAssigneeItem(URI idsColonAssigneeItem) {
    if (this.idsColonAssignee == null) {
      this.idsColonAssignee = new ArrayList<>();
    }
    this.idsColonAssignee.add(idsColonAssigneeItem);
    return this;
  }

   /**
   * Get idsColonAssignee
   * @return idsColonAssignee
  **/
  @javax.annotation.Nullable
  public List<URI> getIdsColonAssignee() {
    return idsColonAssignee;
  }


  public void setIdsColonAssignee(List<URI> idsColonAssignee) {
    this.idsColonAssignee = idsColonAssignee;
  }


  public Rule idsColonConstraint(List<RuleIdsConstraintInner> idsColonConstraint) {
    
    this.idsColonConstraint = idsColonConstraint;
    return this;
  }

  public Rule addIdsColonConstraintItem(RuleIdsConstraintInner idsColonConstraintItem) {
    if (this.idsColonConstraint == null) {
      this.idsColonConstraint = new ArrayList<>();
    }
    this.idsColonConstraint.add(idsColonConstraintItem);
    return this;
  }

   /**
   * Get idsColonConstraint
   * @return idsColonConstraint
  **/
  @javax.annotation.Nullable
  public List<RuleIdsConstraintInner> getIdsColonConstraint() {
    return idsColonConstraint;
  }


  public void setIdsColonConstraint(List<RuleIdsConstraintInner> idsColonConstraint) {
    this.idsColonConstraint = idsColonConstraint;
  }


  public Rule idsColonAssetRefinement(RuleIdsAssetRefinement idsColonAssetRefinement) {
    
    this.idsColonAssetRefinement = idsColonAssetRefinement;
    return this;
  }

   /**
   * Get idsColonAssetRefinement
   * @return idsColonAssetRefinement
  **/
  @javax.annotation.Nullable
  public RuleIdsAssetRefinement getIdsColonAssetRefinement() {
    return idsColonAssetRefinement;
  }


  public void setIdsColonAssetRefinement(RuleIdsAssetRefinement idsColonAssetRefinement) {
    this.idsColonAssetRefinement = idsColonAssetRefinement;
  }


  public Rule idsColonAction(List<IdsColonActionEnum> idsColonAction) {
    
    this.idsColonAction = idsColonAction;
    return this;
  }

  public Rule addIdsColonActionItem(IdsColonActionEnum idsColonActionItem) {
    if (this.idsColonAction == null) {
      this.idsColonAction = new ArrayList<>();
    }
    this.idsColonAction.add(idsColonActionItem);
    return this;
  }

   /**
   * Get idsColonAction
   * @return idsColonAction
  **/
  @javax.annotation.Nonnull
  public List<IdsColonActionEnum> getIdsColonAction() {
    return idsColonAction;
  }


  public void setIdsColonAction(List<IdsColonActionEnum> idsColonAction) {
    this.idsColonAction = idsColonAction;
  }


  public Rule idsColonDescription(List<TypedLiteral> idsColonDescription) {
    
    this.idsColonDescription = idsColonDescription;
    return this;
  }

  public Rule addIdsColonDescriptionItem(TypedLiteral idsColonDescriptionItem) {
    if (this.idsColonDescription == null) {
      this.idsColonDescription = new ArrayList<>();
    }
    this.idsColonDescription.add(idsColonDescriptionItem);
    return this;
  }

   /**
   * Get idsColonDescription
   * @return idsColonDescription
  **/
  @javax.annotation.Nullable
  public List<TypedLiteral> getIdsColonDescription() {
    return idsColonDescription;
  }


  public void setIdsColonDescription(List<TypedLiteral> idsColonDescription) {
    this.idsColonDescription = idsColonDescription;
  }


  public Rule idsColonTitle(List<TypedLiteral> idsColonTitle) {
    
    this.idsColonTitle = idsColonTitle;
    return this;
  }

  public Rule addIdsColonTitleItem(TypedLiteral idsColonTitleItem) {
    if (this.idsColonTitle == null) {
      this.idsColonTitle = new ArrayList<>();
    }
    this.idsColonTitle.add(idsColonTitleItem);
    return this;
  }

   /**
   * Get idsColonTitle
   * @return idsColonTitle
  **/
  @javax.annotation.Nullable
  public List<TypedLiteral> getIdsColonTitle() {
    return idsColonTitle;
  }


  public void setIdsColonTitle(List<TypedLiteral> idsColonTitle) {
    this.idsColonTitle = idsColonTitle;
  }


  public Rule atId(URI atId) {
    
    this.atId = atId;
    return this;
  }

   /**
   * Get atId
   * @return atId
  **/
  @javax.annotation.Nonnull
  public URI getAtId() {
    return atId;
  }


  public void setAtId(URI atId) {
    this.atId = atId;
  }


  public Rule atType(String atType) {
    
    this.atType = atType;
    return this;
  }

   /**
   * Get atType
   * @return atType
  **/
  @javax.annotation.Nonnull
  public String getAtType() {
    return atType;
  }


  public void setAtType(String atType) {
    this.atType = atType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rule rule = (Rule) o;
    return Objects.equals(this.properties, rule.properties) &&
        Objects.equals(this.comment, rule.comment) &&
        Objects.equals(this.label, rule.label) &&
        Objects.equals(this.idsColonTarget, rule.idsColonTarget) &&
        Objects.equals(this.idsColonAssigner, rule.idsColonAssigner) &&
        Objects.equals(this.idsColonAssignee, rule.idsColonAssignee) &&
        Objects.equals(this.idsColonConstraint, rule.idsColonConstraint) &&
        Objects.equals(this.idsColonAssetRefinement, rule.idsColonAssetRefinement) &&
        Objects.equals(this.idsColonAction, rule.idsColonAction) &&
        Objects.equals(this.idsColonDescription, rule.idsColonDescription) &&
        Objects.equals(this.idsColonTitle, rule.idsColonTitle) &&
        Objects.equals(this.atId, rule.atId) &&
        Objects.equals(this.atType, rule.atType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(properties, comment, label, idsColonTarget, idsColonAssigner, idsColonAssignee, idsColonConstraint, idsColonAssetRefinement, idsColonAction, idsColonDescription, idsColonTitle, atId, atType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rule {\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    idsColonTarget: ").append(toIndentedString(idsColonTarget)).append("\n");
    sb.append("    idsColonAssigner: ").append(toIndentedString(idsColonAssigner)).append("\n");
    sb.append("    idsColonAssignee: ").append(toIndentedString(idsColonAssignee)).append("\n");
    sb.append("    idsColonConstraint: ").append(toIndentedString(idsColonConstraint)).append("\n");
    sb.append("    idsColonAssetRefinement: ").append(toIndentedString(idsColonAssetRefinement)).append("\n");
    sb.append("    idsColonAction: ").append(toIndentedString(idsColonAction)).append("\n");
    sb.append("    idsColonDescription: ").append(toIndentedString(idsColonDescription)).append("\n");
    sb.append("    idsColonTitle: ").append(toIndentedString(idsColonTitle)).append("\n");
    sb.append("    atId: ").append(toIndentedString(atId)).append("\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("properties");
    openapiFields.add("comment");
    openapiFields.add("label");
    openapiFields.add("ids:target");
    openapiFields.add("ids:assigner");
    openapiFields.add("ids:assignee");
    openapiFields.add("ids:constraint");
    openapiFields.add("ids:assetRefinement");
    openapiFields.add("ids:action");
    openapiFields.add("ids:description");
    openapiFields.add("ids:title");
    openapiFields.add("@id");
    openapiFields.add("@type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ids:action");
    openapiRequiredFields.add("@id");
    openapiRequiredFields.add("@type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Rule
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Rule.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Rule is not found in the empty JSON string", Rule.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonObj.get("@type").getAsString();
      switch (discriminatorValue) {
        case "Duty":
          Duty.validateJsonObject(jsonObj);
          break;
        case "Permission":
          Permission.validateJsonObject(jsonObj);
          break;
        case "Prohibition":
          Prohibition.validateJsonObject(jsonObj);
          break;
        default: 
          throw new IllegalArgumentException(String.format("The value of the `@type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


 /**
  * Create an instance of Rule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Rule
  * @throws IOException if the JSON string is invalid with respect to Rule
  */
  public static Rule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Rule.class);
  }

 /**
  * Convert an instance of Rule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

